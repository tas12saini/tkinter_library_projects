from tkinter import *
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from matplotlib.figure import Figure
import math

root = Tk()
root.geometry("1500x1500")
tkVar1= StringVar(root)

root.title("Insulation design of an electric cable")
root.configure(background='white')

# Heading
label1 = Label(root, text="Insulation design of an electric cable", fg="green", font="Verdana 22 bold italic underline",bg='white'
                                                                                                   )
label1.place(x=120, y=10)

label2 = Label(root, text="Inputs", fg="Black", font="Helvetica 15 underline",bg='white')
label2.place(x=460, y=110)

label3 = Label(root, text="Radius of electric wire, r‚ÇÅ (mm)", bg='white',fg="blue", font="times 15")
label3.place(x=460, y=150)

scroll1= Scale(root, from_= 0.5, to=10, length = 250,resolution = 0.1, orient=HORIZONTAL, activebackground="orange")
scroll1.configure(background='orange')
scroll1.place(x=460, y=180)

label3 = Label(root, text="Heat transfer coefficient from cladding to ambient, h(W/m^2 C)", bg = 'white',fg="blue", font="times 15")
label3.place(x=748, y=150)

scroll2= Scale(root, from_= 2, to=20, length = 250,resolution = 0.01, orient=HORIZONTAL, activebackground="orange")
scroll2.configure(background='orange')
scroll2.place(x=748, y=180)

label3 = Label(root, text="Select Insulation material(k):", fg="blue", font="times 15",bg='white')
label3.place(x=455, y=235)

choice1 = {'Low Density Polyethene (0.3 W/mK)', 'High Density Polyethene (0.4 W/mK)', 'Polyvinyl Chloride (0.17 W/mK)',
           'Foamed Polyethene (0.25 W/mK)', 'Poly-propylene (0.19 W/mK)', 'Polyamide (0.23 W/mK)',
           'Polyester Elastomer (0.5 W/mK)', 'Polyolefine Elastomer (1.5 W/mK)'}

tkVar1.set('Low Density Polyethene (0.3 W/mK)')
popupMenu1 = OptionMenu(root, tkVar1, *choice1)
popupMenu1.configure(background='orange')
popupMenu1.place(x=455, y=263)


canvas = Canvas(root, width=300, height=180,bg='white')
photo=''''''
photo=PhotoImage(data=photo)
image = canvas.create_image(0,0, image=photo, anchor=NW)
canvas.place(x=70,y=70)


c1 = Canvas(root, width=250, height=80,bg='white')
photo1 = '''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'''
photo1=PhotoImage(data=photo1)
image = c1.create_image(10,40, image=photo1, anchor=W)
c1.place(x=760, y=10)


def lb1():
    if tkVar1.get() == 'Low Density Polyethene (0.3 W/mK)':
        k1 = float(0.3)
    elif tkVar1.get() == 'High Density Polyethene (0.4 W/mK)':
        k1 = float(0.4)
    elif tkVar1.get() == 'Polyvinyl Chloride (0.17 W/mK)':
        k1 = float(0.17)
    elif tkVar1.get() == 'Foamed Polyethene (0.25 W/mK)':
        k1 = float(0.25)
    elif tkVar1.get() == 'Poly-propylene (0.19 W/mK)':
        k1 = float(0.19)
    elif tkVar1.get() == 'Polyamide (0.23 W/mK)':
        k1 = float(0.23)
    elif tkVar1.get() == 'Polyester Elastomer (0.5 W/mK)':
        k1 = float(0.5)
    elif tkVar1.get() == 'Polyolefine Elastomer (1.5 W/mK)':
        k1 = float(1.5)

    h=scroll2.get()
    r1=scroll1.get()

    rad=(k1/h)*100 #Critical radius is in centimeters now

    lb=Label(root,text="Critical radius of insulation %0.2f cm" % rad,bg='white')
    lb.place(x=100,y=305)


def lb2():
    if tkVar1.get() == 'Low Density Polyethene (0.3 W/mK)':
        k1 = float(0.3)
    elif tkVar1.get() == 'High Density Polyethene (0.4 W/mK)':
        k1 = float(0.4)
    elif tkVar1.get() == 'Polyvinyl Chloride (0.17 W/mK)':
        k1 = float(0.17)
    elif tkVar1.get() == 'Foamed Polyethene (0.25 W/mK)':
        k1 = float(0.25)
    elif tkVar1.get() == 'Poly-propylene (0.19 W/mK)':
        k1 = float(0.19)
    elif tkVar1.get() == 'Polyamide (0.23 W/mK)':
        k1 = float(0.23)
    elif tkVar1.get() == 'Polyester Elastomer (0.5 W/mK)':
        k1 = float(0.5)
    elif tkVar1.get() == 'Polyolefine Elastomer (1.5 W/mK)':
        k1 = float(1.5)

    h=scroll2.get()
    r1=scroll1.get()

    thickness=(k1/h)*100 - (r1/10) # Thickness is in centimeters

    lb=Label(root,text="Critical thickness of insulation %0.2f cm" % thickness,bg='white',width=35, height=2)
    lb.place(x=780,y=298)

def cmd():
   plot1()
   lb1()

def cmd2():
   plot2()
   lb2()


def plot1():
    #fetching k value
    if tkVar1.get() == 'Low Density Polyethene (0.3 W/mK)':
        k1 = float(0.3)
    elif tkVar1.get() == 'High Density Polyethene (0.4 W/mK)':
        k1 = float(0.4)
    elif tkVar1.get() == 'Polyvinyl Chloride (0.17 W/mK)':
        k1 = float(0.17)
    elif tkVar1.get() == 'Foamed Polyethene (0.25 W/mK)':
        k1 = float(0.25)
    elif tkVar1.get() == 'Poly-propylene (0.19 W/mK)':
        k1 = float(0.19)
    elif tkVar1.get() == 'Polyamide (0.23 W/mK)':
        k1 = float(0.23)
    elif tkVar1.get() == 'Polyester Elastomer (0.5 W/mK)':
        k1 = float(0.5)
    elif tkVar1.get() == 'Polyolefine Elastomer (1.5 W/mK)':
        k1 = float(1.5)




    r1=scroll1.get()
    h=scroll2.get()

    Q = []
    r2 = []

    crit_thickness=k1/h #in meters

    r1=0.001*r1 #r1 is converted in millimeters
   
    rA=r1

    t = 0.0001 # Thickness of one layer of insulation in meters

    N= 10 * (crit_thickness/t) # *2 has to be done instead of 10

    N=int(N)


    for i in range(0,N,1):
        rA = (r1 + (i * t))
        rC=rA*100
        r2.append(rC)


        QA = 70 / (math.log(rA / r1) / (2 * 3.14 * 1000 * k1) + 1 / (h * 2 * 3.14 * rA * 1000))
        Q.append(QA)


    fig = Figure(figsize=(6,3.5))
    a = fig.add_subplot(111)
    a.plot(r2,Q,color='red')

    a.set_xlabel('r‚ÇÇ(cm)',color='green',labelpad=0)
    a.set_ylabel('Q (watts)',color='green')


    canvas1 = Canvas(root, width=7.5, height=4.5)
    canvas1 = FigureCanvasTkAgg(fig, master=root)
    canvas1.get_tk_widget().place(x=40,y=295)
    canvas1.draw()

def plot2():
    #fetching k value
    if tkVar1.get() == 'Low Density Polyethene (0.3 W/mK)':
        k1 = float(0.3)
    elif tkVar1.get() == 'High Density Polyethene (0.4 W/mK)':
        k1 = float(0.4)
    elif tkVar1.get() == 'Polyvinyl Chloride (0.17 W/mK)':
        k1 = float(0.17)
    elif tkVar1.get() == 'Foamed Polyethene (0.25 W/mK)':
        k1 = float(0.25)
    elif tkVar1.get() == 'Poly-propylene (0.19 W/mK)':
        k1 = float(0.19)
    elif tkVar1.get() == 'Polyamide (0.23 W/mK)':
        k1 = float(0.23)
    elif tkVar1.get() == 'Polyester Elastomer (0.5 W/mK)':
        k1 = float(0.5)
    elif tkVar1.get() == 'Polyolefine Elastomer (1.5 W/mK)':
        k1 = float(1.5)
    

    r1=scroll1.get()
    h=scroll2.get()

    Q = []
    r2 = []

    crit_thickness=k1/h #in meters

    r1=0.001*r1 #r1 is converted in millimeters
   
    rA=r1

    t = 0.0001 # Thickness of one layer of insulation in meters

    N= 10 * (crit_thickness/t) # *2 has to be done instead of 10

    N=int(N)


    for i in range(0,N,1):
        rC=i*t*100
        r2.append(rC)

        rA = (r1 + (i * t))

        QA = 70 / (math.log(rA / r1) / (2 * 3.14 * 1000 * k1) + 1 / (h * 2 * 3.14 * rA * 1000))
        Q.append(QA)



    fig = Figure(figsize=(6,3.5))
    a = fig.add_subplot(111)
    a.plot(r2,Q,color='red')


    a.set_xlabel('t (cm)',color='green',labelpad=0)	
    a.set_ylabel('Q (watts)',color='green')

    canvas2 = Canvas(root, width=7.5, height=3.5)
    canvas2 = FigureCanvasTkAgg(fig, master=root)
    canvas2.get_tk_widget().place(x=660,y=298)
    canvas2.draw() 
  

button2 = Button(root, text="Plot r‚ÇÇ wrt Q",width=11, height=1,fg="green",command=lambda:cmd())
button2.place(x=150, y=270)

button3 = Button(root, text="Plot Q wrt t", fg="green",width=11, height=1,command=lambda:cmd2())
button3.place(x=860, y=260)

root.state('zoomed')

root.mainloop()